apiVersion: kubeeye.kubesphere.io/v1alpha2
kind: InspectRule
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/created-by: kubeeye
    app.kubernetes.io/instance: inspectrules-sample
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: inspectrules
    app.kubernetes.io/part-of: kubeeye
    kubeeye.kubesphere.io/rule-group: kubeeye_RBAC_rego
  name: kubeeye-inspectrules2-1680158867
  namespace: kubeeye-system
spec:
  opas:
  - module: kubeeye_RBAC_rego
    name: canModifyWorkloadsRoleRule
    rule: |-
      package kubeeye_RBAC_rego

      deny[msg] {
          resource := input
          type := resource.Object.kind
          resourcename := resource.Object.metadata.name
          resourcenamespace := resource.Object.metadata.namespace
          type == "Role"
          level := "warning"

          isNotDefaultRBAC(resource)
          canModifyPodResource(resource)
          haveModifyPodResourceVerb(resource)


          msg := {
              "Name": sprintf("%v", [resourcename]),
              "Namespace": sprintf("%v", [resourcenamespace]),
              "Type": sprintf("%v", [type]),
              "Level": sprintf("%v", [level]),
              "Message": "CanModifyWorkloads"
          }
      }

      deny[msg] {
          resource := input
          type := resource.Object.kind
          resourcename := resource.Object.metadata.name
          type == "ClusterRole"
          level := "warning"

          isNotDefaultRBAC(resource)
          canModifyPodResource(resource)
          haveModifyPodResourceVerb(resource)


          msg := {
              "Name": sprintf("%v", [resourcename]),
              "Type": sprintf("%v", [type]),
              "Level": sprintf("%v", [level]),
              "Message": "CanModifyWorkloads"
          }
      }

      isNotDefaultRBAC(resource) {
          not resource.Object.metadata.labels["kubernetes.io/bootstrapping"] == "rbac-defaults"
      }

      canModifyPodResource(resource){
          resource.Object.rules[_].resources[_] == "pods"
      }

      canModifyPodResource(resource){
          resource.Object.rules[_].resources[_] == "deployments"
      }

      canModifyPodResource(resource){
          resource.Object.rules[_].resources[_] == "daemonsets"
      }

      canModifyPodResource(resource){
          resource.Object.rules[_].resources[_] == "replicasets"
      }

      canModifyPodResource(resource){
          resource.Object.rules[_].resources[_] == "statefulsets"
      }

      canModifyPodResource(resource){
          resource.Object.rules[_].resources[_] == "jobs"
      }

      canModifyPodResource(resource){
          resource.Object.rules[_].resources[_] == "cronjobs"
      }

      canModifyPodResource(resource){
          resource.Object.rules[_].resources[_] == "replicationcontrollers"
      }

      canModifyPodResource(resource){
          resource.Object.rules[_].resources[_] == "*"
      }

      haveModifyPodResourceVerb(resource){
          resource.Object.rules[_].verbs[_] == "create"
      }

      haveModifyPodResourceVerb(resource){
          resource.Object.rules[_].verbs[_] == "update"
      }

      haveModifyPodResourceVerb(resource){
          resource.Object.rules[_].verbs[_] == "patch"
      }

      haveModifyPodResourceVerb(resource){
          resource.Object.rules[_].verbs[_] == "delete"
      }

      haveModifyPodResourceVerb(resource){
          resource.Object.rules[_].verbs[_] == "deletecollection"
      }

      haveModifyPodResourceVerb(resource){
          resource.Object.rules[_].verbs[_] == "*"
      }
  - module: kubeeye_RBAC_rego
    name: canModifyResourcesRoleRule
    rule: |-
      package kubeeye_RBAC_rego

      deny[msg] {
          resource := input
          type := resource.Object.kind
          resourcename := resource.Object.metadata.name
          resourcenamespace := resource.Object.metadata.namespace
          type == "Role"
          level := "warning"

          isNotDefaultRBAC(resource)
          canModifyResources(resource)
          haveModifyResourcesVerb(resource)

          msg := {
              "Name": sprintf("%v", [resourcename]),
              "Namespace": sprintf("%v", [resourcenamespace]),
              "Type": sprintf("%v", [type]),
              "Level": sprintf("%v", [level]),
              "Message": "CanDeleteResources"
          }
      }

      deny[msg] {
          resource := input
          type := resource.Object.kind
          resourcename := resource.Object.metadata.name
          type == "ClusterRole"
          level := "warning"

          isNotDefaultRBAC(resource)
          canModifyResources(resource)
          haveModifyResourcesVerb(resource)

          msg := {
              "Name": sprintf("%v", [resourcename]),
              "Type": sprintf("%v", [type]),
              "Level": sprintf("%v", [level]),
              "Message": "CanDeleteResources"
          }
      }

      isNotDefaultRBAC(resource) {
          not resource.Object.metadata.labels["kubernetes.io/bootstrapping"] == "rbac-defaults"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "secrets"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "configmaps"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "persistentvolumeclaims"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "horizontalpodautoscalers"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "events"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "roles"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "clusterroles"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "users"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "groups"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "serviceaccounts"
      }


      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "services"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "ingresses"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "endpoints"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "networkpolicies"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "certificates"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "certificaterequests"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "issuers"
      }

      canModifyResources(resource){
          resource.Object.rules[_].resources[_] == "*"
      }

      haveModifyResourcesVerb(resource){
          resource.Object.rules[_].verbs[_] == "create"
      }

      haveModifyResourcesVerb(resource){
          resource.Object.rules[_].verbs[_] == "update"
      }

      haveModifyResourcesVerb(resource){
          resource.Object.rules[_].verbs[_] == "patch"
      }

      haveModifyResourcesVerb(resource){
          resource.Object.rules[_].verbs[_] == "delete"
      }

      haveModifyResourcesVerb(resource){
          resource.Object.rules[_].verbs[_] == "deletecollection"
      }

      haveModifyResourcesVerb(resource){
          resource.Object.rules[_].verbs[_] == "*"
      }
  - module: kubeeye_RBAC_rego
    name: canImpersonateUserRoleRule
    rule: |-
      package kubeeye_RBAC_rego

      deny[msg] {
          resource := input
          type := resource.Object.kind
          resourcename := resource.Object.metadata.name
          resourcenamespace := resource.Object.metadata.namespace
          type == "Role"
          level := "warning"

          isNotDefaultRBAC(resource)
          canImpersonateUserResource(resource)
          haveImpersonateUserResourceVerb(resource)

          msg := {
              "Name": sprintf("%v", [resourcename]),
              "Namespace": sprintf("%v", [resourcenamespace]),
              "Type": sprintf("%v", [type]),
              "Level": sprintf("%v", [level]),
              "Message": "CanImpersonateUser"
          }
      }

      deny[msg] {
          resource := input
          type := resource.Object.kind
          resourcename := resource.Object.metadata.name
          type == "ClusterRole"
          level := "warning"

          isNotDefaultRBAC(resource)
          canImpersonateUserResource(resource)
          haveImpersonateUserResourceVerb(resource)

          msg := {
              "Name": sprintf("%v", [resourcename]),
              "Type": sprintf("%v", [type]),
              "Level": sprintf("%v", [level]),
              "Message": "CanImpersonateUser"
          }
      }

      isNotDefaultRBAC(resource) {
          not resource.Object.metadata.labels["kubernetes.io/bootstrapping"] == "rbac-defaults"
      }

      canImpersonateUserResource(resource){
          resource.Object.rules[_].resources[_] == "users"
      }

      canImpersonateUserResource(resource){
          resource.Object.rules[_].resources[_] == "groups"
      }

      canImpersonateUserResource(resource){
          resource.Object.rules[_].resources[_] == "serviceaccounts"
      }

      canImpersonateUserResource(resource){
          resource.Object.rules[_].resources[_] == "*"
      }

      haveImpersonateUserResourceVerb(resource){
          resource.Object.rules[_].verbs[_] == "impersonate"
      }

      haveImpersonateUserResourceVerb(resource){
          resource.Object.rules[_].verbs[_] == "*"
      }
status:
  importTime: null
