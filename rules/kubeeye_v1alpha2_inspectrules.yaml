apiVersion: kubeeye.kubesphere.io/v1alpha2
kind: InspectRules
metadata:
  labels:
    app.kubernetes.io/name: inspectrules
    app.kubernetes.io/instance: inspectrules-sample
    app.kubernetes.io/part-of: kubeeye
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: kubeeye
    kubeeye.kubesphere.io/rule-tag: kubeeye_workloads_rego
  name: inspectrules-sample
  namespace: kubeeye-system
spec:
#  prometheusEndpoint: http://prometheus-k8s.kubesphere-monitoring-system.svc.cluster.local:9090
  prometheus:
    - name: harbor_health
      rule: harbor_health==1
      endpoint: http://172.31.73.216:30258
    - name: harbor_system_info
      rule: harbor_system_info==1
      endpoint: http://172.31.73.216:30258
#  opas:
#    - module: kubeeye_workloads_rego
#      name: imagePullPolicyRule
#      rule: |-
#        package kubeeye_workloads_rego
#
#        deny[msg] {
#            resource := input
#            type := resource.Object.kind
#            resourcename := resource.Object.metadata.name
#            resourcenamespace := resource.Object.metadata.namespace
#            type == "Pod"
#            level := "warning"
#
#            PodimagePullPolicyRule(resource)
#
#            msg := {
#                "Name": sprintf("%v", [resourcename]),
#                "Namespace": sprintf("%v", [resourcenamespace]),
#                "Type": sprintf("%v", [type]),
#                "Level": sprintf("%v", [level]),
#                "Message": "ImagePullPolicyNotAlways"
#            }
#        }
#
#        PodimagePullPolicyRule(resource) {
#            imagePullPolicy := resource.Object.spec.containers[_].imagePullPolicy
#            imagePullPolicy != "Always"
#        }
#
#        deny[msg] {
#            resource := input
#            type := resource.Object.kind
#            resourcename := resource.Object.metadata.name
#            resourcenamespace := resource.Object.metadata.namespace
#            workloadsType := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
#            workloadsType[type]
#            level := "warning"
#
#            workloadsimagePullPolicyRule(resource)
#
#            msg := {
#                "Name": sprintf("%v", [resourcename]),
#                "Namespace": sprintf("%v", [resourcenamespace]),
#                "Type": sprintf("%v", [type]),
#                "Level": sprintf("%v", [level]),
#                "Message": "ImagePullPolicyNotAlways"
#            }
#        }
#
#        workloadsimagePullPolicyRule(resource) {
#            imagePullPolicy := resource.Object.spec.template.spec.containers[_].imagePullPolicy
#            imagePullPolicy != "Always"
#        }
#
#        deny[msg] {
#            resource := input
#            type := resource.Object.kind
#            resourcename := resource.Object.metadata.name
#            resourcenamespace := resource.Object.metadata.namespace
#            type == "CronJob"
#            level := "warning"
#
#            CronJobimagePullPolicyRule(resource)
#
#            msg := {
#                "Name": sprintf("%v", [resourcename]),
#                "Namespace": sprintf("%v", [resourcenamespace]),
#                "Type": sprintf("%v", [type]),
#                "Level": sprintf("%v", [level]),
#                "Message": "ImagePullPolicyNotAlways"
#            }
#        }
#
#        CronJobimagePullPolicyRule(resource) {
#            imagePullPolicy := resource.Object.spec.jobTemplate.spec.template.spec.containers[_].imagePullPolicy
#            imagePullPolicy != "Always"
#        }