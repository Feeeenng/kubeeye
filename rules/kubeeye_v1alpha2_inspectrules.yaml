apiVersion: kubeeye.kubesphere.io/v1alpha2
kind: InspectRule
metadata:
  labels:
    app.kubernetes.io/name: inspectrule
    app.kubernetes.io/instance: inspectrule-sample
    app.kubernetes.io/part-of: kubeeye
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: kubeeye
    kubeeye.kubesphere.io/rule-tag: kubeeye_workloads_rego
  name: inspectrules-sample
  namespace: kubeeye-system
spec:
  sysctl:
    - name: vm.max_map_count
    - name: net.ipv4.ip_forward
      rule: net.ipv4.ip_forward = 0
    - name: net.bridge.bridge-nf-call-arptables
      rule: net.bridge.bridge-nf-call-arptables == 1
    - name: net.bridge.bridge-nf-call-ip6tables
      rule: net.bridge.bridge-nf-call-ip6tables == 1
    - name: net.ipv4.port
      rule: net.ipv4.port == 1
#      nodeName: node1
#      nodeSelector:
#        ope: XXX
  systemd:
    - name: docker
      rule: docker = "active"
#      nodeName: node1
    - name: etcd
      rule: etcd = "active"
      nodeName: master
  fileChange:
    - name: config-sample
      path: /root/config-sample.yaml
      nodeName: master
    - name: inspecttask
      path: /Users/xiaoliu/Desktop/work/kubeeye/rules/kubeeye_v1alpha2_inspecttask.yaml
  prometheusEndpoint: http://prometheus-k8s.kubesphere-monitoring-system.svc.cluster.local:9090
  prometheus:
    - name: harbor_health
      rule: harbor_health==1
    - name: harbor_system_info
      rule: node_filesystem_avail_bytes/node_filesystem_size_bytes{mountpoint=~"/var/lib/docker|/kube|/home|/var|/"}>0.25
  opas:
    - module: kubeeye_workloads_rego
      name: imagePullPolicyRule
      rule: |-
        package kubeeye_workloads_rego

        deny[msg] {
            resource := input
            type := resource.Object.kind
            resourcename := resource.Object.metadata.name
            resourcenamespace := resource.Object.metadata.namespace
            type == "Pod"
            level := "warning"

            PodimagePullPolicyRule(resource)

            msg := {
                "Name": sprintf("%v", [resourcename]),
                "Namespace": sprintf("%v", [resourcenamespace]),
                "Type": sprintf("%v", [type]),
                "Level": sprintf("%v", [level]),
                "Message": "ImagePullPolicyNotAlways"
            }
        }

        PodimagePullPolicyRule(resource) {
            imagePullPolicy := resource.Object.spec.containers[_].imagePullPolicy
            imagePullPolicy != "Always"
        }

        deny[msg] {
            resource := input
            type := resource.Object.kind
            resourcename := resource.Object.metadata.name
            resourcenamespace := resource.Object.metadata.namespace
            workloadsType := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
            workloadsType[type]
            level := "warning"

            workloadsimagePullPolicyRule(resource)

            msg := {
                "Name": sprintf("%v", [resourcename]),
                "Namespace": sprintf("%v", [resourcenamespace]),
                "Type": sprintf("%v", [type]),
                "Level": sprintf("%v", [level]),
                "Message": "ImagePullPolicyNotAlways"
            }
        }

        workloadsimagePullPolicyRule(resource) {
            imagePullPolicy := resource.Object.spec.template.spec.containers[_].imagePullPolicy
            imagePullPolicy != "Always"
        }

        deny[msg] {
            resource := input
            type := resource.Object.kind
            resourcename := resource.Object.metadata.name
            resourcenamespace := resource.Object.metadata.namespace
            type == "CronJob"
            level := "warning"

            CronJobimagePullPolicyRule(resource)

            msg := {
                "Name": sprintf("%v", [resourcename]),
                "Namespace": sprintf("%v", [resourcenamespace]),
                "Type": sprintf("%v", [type]),
                "Level": sprintf("%v", [level]),
                "Message": "ImagePullPolicyNotAlways"
            }
        }

        CronJobimagePullPolicyRule(resource) {
            imagePullPolicy := resource.Object.spec.jobTemplate.spec.template.spec.containers[_].imagePullPolicy
            imagePullPolicy != "Always"
        }