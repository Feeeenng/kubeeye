/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/kubesphere/kubeeye/apis/kubeeye/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InspectRulesLister helps list InspectRules.
// All objects returned here must be treated as read-only.
type InspectRulesLister interface {
	// List lists all InspectRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.InspectRules, err error)
	// InspectRules returns an object that can list and get InspectRules.
	InspectRules(namespace string) InspectRulesNamespaceLister
	InspectRulesListerExpansion
}

// inspectRulesLister implements the InspectRulesLister interface.
type inspectRulesLister struct {
	indexer cache.Indexer
}

// NewInspectRulesLister returns a new InspectRulesLister.
func NewInspectRulesLister(indexer cache.Indexer) InspectRulesLister {
	return &inspectRulesLister{indexer: indexer}
}

// List lists all InspectRules in the indexer.
func (s *inspectRulesLister) List(selector labels.Selector) (ret []*v1alpha2.InspectRules, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.InspectRules))
	})
	return ret, err
}

// InspectRules returns an object that can list and get InspectRules.
func (s *inspectRulesLister) InspectRules(namespace string) InspectRulesNamespaceLister {
	return inspectRulesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InspectRulesNamespaceLister helps list and get InspectRules.
// All objects returned here must be treated as read-only.
type InspectRulesNamespaceLister interface {
	// List lists all InspectRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.InspectRules, err error)
	// Get retrieves the InspectRules from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.InspectRules, error)
	InspectRulesNamespaceListerExpansion
}

// inspectRulesNamespaceLister implements the InspectRulesNamespaceLister
// interface.
type inspectRulesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InspectRules in the indexer for a given namespace.
func (s inspectRulesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.InspectRules, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.InspectRules))
	})
	return ret, err
}

// Get retrieves the InspectRules from the indexer for a given namespace and name.
func (s inspectRulesNamespaceLister) Get(name string) (*v1alpha2.InspectRules, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("inspectrules"), name)
	}
	return obj.(*v1alpha2.InspectRules), nil
}
