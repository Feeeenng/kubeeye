# Description: The rules for inspecting CronJob resources.
---
apiVersion: kubeeye.kubesphere.io/v1alpha2
kind: InspectRule
metadata:
  name: cronjob-inspect-rules
spec:
  opas:
  - name: imagePullPolicyRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }

      deny contains msg if {

        input.kind == "CronJob"
        input.apiVersion == "batch/v1"

        not excluded_namespaces[input.metadata.namespace]
        level := "WARNING"

        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        policy := container.imagePullPolicy
        policy != "IfNotPresent"

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobImagePullPolicyRule",
            "Reason": sprintf("当前资源镜像拉取策略为: %v , 需要修改为 IfNotPresent ", [policy]),
            "Level": sprintf("%v", [level])
        }
      }

  - name: readinessProbeRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
           
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"

        not excluded_namespaces[input.metadata.namespace]
        
        level := "WARNING"

        not input.metadata.namespace == "kubeeye-system"

        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        not container.readinessProbe

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobReadinessProbeRule",
            "Reason": "当前资源没有配置就绪探针",
            "Level": sprintf("%v", [level])
        }
      }

  - name: livenessProbeRuleForCroneJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]
        level := "WARNING"

        not input.metadata.namespace == "kubeeye-system"

        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        not container.livenessProbe

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobLivenessProbeRule",
            "Reason": "当前资源没有配置存活探针",
            "Level": sprintf("%v", [level])
        }
      }

  - name: hostPathRuleForCroJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]
        level := "DANGER"

        container := input.spec.jobTemplate.spec.template.spec.containers[_]

        volume := input.spec.jobTemplate.spec.template.spec.volumes[_]

        "hostPath" in volume

        volume_mount := container.volumeMounts[_]

        volume_mount.name == volume.name
        not volume_mount.readOnly

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobHostPathRule",
            "Reason": sprintf("当前资源使用hostPath挂载卷 , 卷名: %v , 未配置只读模式", [volume.name]),
            "Level": sprintf("%v", [level])
        }
      }

  - name: privilegedRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]
        level := "DANGER"

        input.spec.jobTemplate.spec.template.spec.containers[_].securityContext.privileged == true

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobPrivilegedRule",
            "Reason": "当前资源已启用特权模式",
            "Level": sprintf("%v", [level])
        }
      }

  - name: insecureCapabilitiesRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {

        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]
        level := "CRITICAL"

        insecureCapabilities := ["CHOWN", "DAC_OVERRIDE", "FSETID", "FOWNER", "MKNOD", "NET_RAW", "SETGID", "SETUID", "SETFCAP", "NET_BIND_SERVICE","SYS_CHROOT","KILL","AUDIT_WRITE"]
        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        capabilities := container.securityContext.capabilities.add[_]
        insecureCapabilities[_] == capabilities

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobInsecureCapabilitiesRule",
            "Reason": sprintf("容器 '%v' 配置了系统权限: %v", [container.name, capabilities]),
            "Level": sprintf("%v", [level])
        }
      }

  - name: highRiskCapabilitiesRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]
        level := "DANGER"
        
        HighRiskCapabilities := ["NET_ADMIN", "SYS_ADMIN", "ALL"]
        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        capabilities := container.securityContext.capabilities.add[_]
        HighRiskCapabilities[_] == capabilities

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobHighRiskCapabilitiesRule",
            "Reason": sprintf("容器 '%v' 配置了系统权限: %v", [container.name, capabilities]),
            "Level": sprintf("%v", [level])
        }
      }

  - name: cpuRequestsRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]  
        level := "WARNING"

        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        not container.resources.requests.cpu

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobCPURequestsRule",
            "Reason": sprintf("容器 '%v' 未配置CPU资源请求", [container.name]),
            "Level": sprintf("%v", [level])
        }
      }

  - name: cpuLimitsRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]     
        level := "WARNING"

        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        not container.resources.limits.cpu

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobCPULimitsRule",
            "Reason": sprintf("容器 '%v' 未配置CPU资源限制", [container.name]),
            "Level": sprintf("%v", [level])
        }
      }

  - name: memoryRequestsRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]      
        level := "WARNING"

        not input.metadata.namespace == "kubeeye-system"

        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        not container.resources.requests.memory

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobMemoryRequestsRule",
            "Reason": sprintf("容器 '%v' 未配置内存资源请求", [container.name]),
            "Level": sprintf("%v", [level])
        }
      }

  - name: memoryLimitsRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]
        level := "WARNING"

        not input.metadata.namespace == "kubeeye-system"

        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        not container.resources.limits.memory

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobMemoryLimitsRule",
            "Reason": sprintf("容器 '%v' 未配置内存资源限制", [container.name]),
            "Level": sprintf("%v", [level])
        }
      }

  - name: hostPortRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]
        level := "CRITICAL"
        
        not input.metadata.namespace == "kubeeye-system"

        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        port := container.ports[_]
        port.hostPort

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobHostPortRule",
            "Reason": sprintf("容器 '%v' 使用了 hostPort: %v", [container.name, port.hostPort]),
            "Level": sprintf("%v", [level])
        }
      }

  - name: hostPIDRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]
        level := "CRITICAL"

        not input.metadata.namespace == "kubeeye-system"

        input.spec.jobTemplate.spec.template.spec.hostPID == true

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobHostPIDRule",
            "Reason": "当前资源已启用 hostPID",
            "Level": sprintf("%v", [level])
        }
      }

  - name: hostNetworkRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"
        not excluded_namespaces[input.metadata.namespace]
        level := "CRITICAL"

        not input.metadata.namespace == "kubeeye-system"

        input.spec.jobTemplate.spec.template.spec.hostNetwork == true

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobHostNetworkRule",
            "Reason": "当前资源已启用 hostNetwork",
            "Level": sprintf("%v", [level])
        }
      }

  - name: hostIPCRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }

      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"

        not excluded_namespaces[input.metadata.namespace]
        level := "CRITICAL"

        not input.metadata.namespace == "kubeeye-system"

        input.spec.jobTemplate.spec.template.spec.hostIPC == true

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobHostIPCRule",
            "Reason": "当前资源已启用 hostIPC",
            "Level": sprintf("%v", [level])
        }
      }

  - name: LivenessProbeTimeRuleForCronJob
    rule: |-
      package inspect.kubeeye
      import rego.v1
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {
        
        input.kind == "CronJob"
        input.apiVersion == "batch/v1"

        not excluded_namespaces[input.metadata.namespace]

        level := "WARNING"
        
        namespace_check(input.metadata.namespace)

        container := input.spec.jobTemplate.spec.template.spec.containers[_]
        probe := container.livenessProbe
        
        initial_delay := object.get(probe, "initialDelaySeconds", 0)
        period := object.get(probe, "periodSeconds", 10)
        failure_threshold := object.get(probe, "failureThreshold", 3)
        total_time := initial_delay + (failure_threshold * period)

        total_time >= 180

        msg := {
            "Name": sprintf("%v", [input.metadata.name]),
            "Namespace": sprintf("%v", [input.metadata.namespace]),
            "Type": sprintf("%v", [input.kind]),
            "Message": "CronJobLivenessProbeTimeRule",
            "Reason": sprintf("容器 %v 存活探针探测总时间 %vs >= 180s", [container.name, total_time]),
            "Level": sprintf("%v", [level])
        }
      }

      namespace_check(namespace) if {
          startswith(namespace, "kubesphere-")
      }
      namespace_check(namespace) if {
          namespace == "kube-system"
      }
