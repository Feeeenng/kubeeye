# Description: The rules for inspecting Pod State.
---
apiVersion: kubeeye.kubesphere.io/v1alpha2
kind: InspectRule
metadata:
  name: pod-state-inspect-rules
spec:
  opas:
  - name: PodStateCheck
    rule: |-
      package inspect.kubeeye
      import rego.v1
      
      excluded_namespaces := {
           "kube-system",
           "argocd",
           "kubeeye-system",
           "kubesphere-system",
           "kubesphere-monitoring-system",
           "kubesphere-controls-system",
           "kubesphere-logging-system",
           "kubesphere-devops-system"

      }
      deny contains msg if {

        input.kind == "Pod"
        input.apiVersion == "v1"
        
        not excluded_namespaces[input.metadata.namespace]
        
        level := "DANGER"

        not input.metadata.namespace == "kubeeye-system"

        test := input.status.containerStatuses[_]
        input.status.phase != "Succeeded"
        not test.state.running

        container_status := input.status.containerStatuses[_]
        container_name := container_status.name

        status := get_container_status(container_status)

        msg := {
          "Name": sprintf("%v", [input.metadata.name]),
          "Namespace": sprintf("%v", [input.metadata.namespace]),
          "Type": sprintf("%v", [input.kind]),
          "Level": sprintf("%v", [level]),
          "Message": "PodStateCheck",
          "Reason": sprintf("%v %v", [container_name, status])
        }
      }

      get_container_status(container_status) := status if {
        container_status.state.terminated
        not container_status.state.terminated.reason == "Completed"
        status := container_status.state.terminated.reason
      } else := status if {
        container_status.state.waiting
        status := container_status.state.waiting.reason
      }
